/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"
 #include <stdint.h>
 typedef struct { char *privateKey; char *publicKey; } KeyPair;
 typedef struct { char *privateKey; char *publicKey; char *certificate; } PKCS12KeyPair;

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


extern char* ConvertJWKToPrivateKey(char* p0, char* p1);

extern char* ConvertJWKToPublicKey(char* p0, char* p1);

extern char* ConvertKeyPairToPKCS12(char* p0, char* p1, char* p2);

extern PKCS12KeyPair ConvertPKCS12ToKeyPair(char* p0, char* p1);

extern char* ConvertPrivateKeyToPKCS8(char* p0);

extern char* ConvertPrivateKeyToPKCS1(char* p0);

extern char* ConvertPrivateKeyToJWK(char* p0);

extern char* ConvertPrivateKeyToPublicKey(char* p0);

extern char* ConvertPublicKeyToPKIX(char* p0);

extern char* ConvertPublicKeyToPKCS1(char* p0);

extern char* ConvertPublicKeyToJWK(char* p0);

extern char* DecryptPrivateKey(char* p0, char* p1);

extern char* EncryptPrivateKey(char* p0, char* p1, char* p2);

extern char* DecryptOAEP(char* p0, char* p1, char* p2, char* p3);

/* Return type for DecryptOAEPBytes */
struct DecryptOAEPBytes_return {
	void* r0;
	int r1;
};

extern struct DecryptOAEPBytes_return DecryptOAEPBytes(void* p0, int p1, char* p2, char* p3, char* p4);

extern char* DecryptPKCS1v15(char* p0, char* p1);

extern char* EncryptOAEP(char* p0, char* p1, char* p2, char* p3);

/* Return type for EncryptOAEPBytes */
struct EncryptOAEPBytes_return {
	void* r0;
	int r1;
};

extern struct EncryptOAEPBytes_return EncryptOAEPBytes(void* p0, int p1, char* p2, char* p3, char* p4);

extern char* EncryptPKCS1v15(char* p0, char* p1);

extern KeyPair Generate(GoInt p0);

extern char* Hash(char* p0, char* p1);

extern char* Base64(char* p0);

extern char* SignPKCS1v15(char* p0, char* p1, char* p2);

extern char* SignPSS(char* p0, char* p1, char* p2, char* p3);

extern char* VerifyPKCS1v15(char* p0, char* p1, char* p2, char* p3);

extern char* VerifyPSS(char* p0, char* p1, char* p2, char* p3, char* p4);

#ifdef __cplusplus
}
#endif
